version: '3.9'

services:
    # Application Service from dockerfile
    app:
        build:
            context: .
            dockerfile: Dockerfile
        container_name: express_template
        restart: unless-stopped
        env_file: .env
        environment:
            - MONGO_URI=mongodb://${MONGO_USERNAME}:${MONGO_PASSWORD}@mongodb:27017/${MONGO_DB}?authSource=admin
            - REDIS_URI=redis://${REDIS_USERNAME}:${REDIS_PASSWORD}@redis:6379
        ports:
            - '${PORT:-3000}:80'
        depends_on:
            mongo:
                condition: service_healthy
            redis:
                condition: service_healthy
        networks:
            - template-backend-network
        healthcheck:
            test: ['CMD', 'curl', '-f', 'http://localhost:3000/health']
            interval: 30s
            timeout: 5s
            retries: 3,
            start_period: 10s

    # Mongo DB service
    mongo:
        image: mongo:8.0.9
        container_name: mongo_db_template_express
        restart: unless-stopped
        volumes:
            - mongo_data:/data/db
            - ./mongo-init:/docker-entrypoint-initdb.d
        ports:
            - '${MONGO_PORT:-27017}:27017'
        networks:
            - template-backend-network
        environment:
            - MONGO_INITDB_ROOT_USERNAME=${MONGO_USERNAME}
            - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
            - MONGO_INITDB_DATABASE=${MONGO_DB}
        healthcheck:
            test: echo 'db.runCommand("ping").ok' | mongosh mongodb://${MONGO_USERNAME}:${MONGO_PASSWORD}@localhost:27017/admin --quiet
            interval: 20s
            timeout: 5s
            retries: 5
            start_period: 10s

    # Redis service
    redis:
        image: redis:8.0.1-alpine
        container_name: redis_cache_template_express
        restart: unless-stopped
        ports:
            - '${REDIS_PORT:-6379}:6379'
        networks:
            - template-backend-network
        volumes:
            - redis_data:/data
        healthcheck:
            test: ['CMD', 'redis-cli', '-a', '${REDIS_PASSWORD}', 'ping']
            interval: 30s
            timeout: 10s
            retries: 3

    # NGINX Service
    nginx:
        image: nginx:1.27-alpine
        container_name: nginx-template_express
        restart: unless-stopped
        ports:
            - '${NGINX_HTTP_PORT:-80}:80'
            - '${NGINX_HTTPS_PORT:-443}:443'
        volumes:
            - ./nginx.conf:/etc/nginx/nginx.conf:ro
            - ./ssl:/etc/nginx/ssl:ro
            - nginx_logs:/var/log/nginx
            - ./static:/var/www/static:ro
        depends_on:
        app:
            condition: service_healthy
        networks:
            - backend-network
        healthcheck:
        test: ['CMD', 'wget', '-qO-', 'http://localhost/health']
        interval: 10s
        timeout: 5s
        retries: 3
        start_period: 5s

    # Auto update container from docker hub
    watchtower:
        image: containrrr/watchtower
        container_name: watchtower
        restart: unless-stopped
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
        environment:
            - WATCHTOWER_CLEANUP=true
            - WATCHTOWER_POLL_INTERVAL=300
        networks:
            - backend-network

networks:
    template-backend-network:
        driver: bridge

volumes:
    mongo_data:
        driver: local
    redis_data:
        driver: local
    nginx_logs:
        driver: local
